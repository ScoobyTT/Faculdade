#include <iostream> // Equivalente a <stdio.h> para entrada/saída
#include <algorithm> // Para std::max, se necessário, mas não usado diretamente aqui

// Definição da estrutura da árvore em C++ (geralmente como uma classe ou struct com métodos)
// Para manter a equivalência, vou usar uma struct simples.
struct Arvore {
    int info;
    Arvore *esq;
    Arvore *dir;

    // Construtor para facilitar a criação de nós
    Arvore(int val) : info(val), esq(nullptr), dir(nullptr) {}
};

// Helper function: Recursively counts the number of leaf nodes in a given subtree.
// Em C++, costuma-se usar 'nullptr' em vez de 'NULL'.
int contarFolhas(Arvore *node) {
    if (node == nullptr) {
        return 0;
    }
    if (node->esq == nullptr && node->dir == nullptr) {
        return 1;
    }
    return contarFolhas(node->esq) + contarFolhas(node->dir);
}

// *** Funções Auxiliares para Remoção em C++ ***
// A lógica da remoção é a mesma de C, mas a sintaxe para 'new'/'delete' e 'nullptr' muda.

// Função para encontrar o nó de menor valor na sub-árvore (em C++).
Arvore* encontrarMinimo(Arvore* no) {
    while (no != nullptr && no->esq != nullptr) {
        no = no->esq;
    }
    return no;
}

// Função de remoção de nó em ABP. Retorna a nova raiz da sub-árvore.
// Agora retorna um ponteiro, e a remoção usa 'delete'.
Arvore* removerNo(Arvore* raiz_sub, int valor_a_remover) {
    if (raiz_sub == nullptr) {
        return nullptr;
    }

    if (valor_a_remover < raiz_sub->info) {
        raiz_sub->esq = removerNo(raiz_sub->esq, valor_a_remover);
    } else if (valor_a_remover > raiz_sub->info) {
        raiz_sub->dir = removerNo(raiz_sub->dir, valor_a_remover);
    } else { // Nó encontrado
        // Caso 1: Nó com nenhum ou apenas um filho
        if (raiz_sub->esq == nullptr) {
            Arvore* temp = raiz_sub->dir;
            delete raiz_sub; // Libera a memória do nó
            return temp;
        } else if (raiz_sub->dir == nullptr) {
            Arvore* temp = raiz_sub->esq;
            delete raiz_sub; // Libera a memória do nó
            return temp;
        }

        // Caso 2: Nó com dois filhos
        Arvore* temp = encontrarMinimo(raiz_sub->dir);
        raiz_sub->info = temp->info; // Copia o conteúdo do sucessor
        raiz_sub->dir = removerNo(raiz_sub->dir, temp->info); // Remove o sucessor
    }
    return raiz_sub;
}

// Função principal para a Questão 2 em C++.
// Uso de referência a ponteiro (Arvore*& raiz_ref) em vez de ponteiro para ponteiro (Arvore** raiz_ptr)
// Esta é a forma idiomática e mais segura de C++ para permitir que a função modifique o ponteiro passado.
void igualarFolhasSubArvores(Arvore*& raiz_ref) { // Passa a raiz por referência (pode ser modificada)
    if (raiz_ref == nullptr || (raiz_ref->esq == nullptr && raiz_ref->dir == nullptr)) {
        std::cout << "A arvore esta vazia ou tem apenas a raiz. Nao ha sub-arvores para igualar." << std::endl;
        return;
    }

    // Não precisamos de uma cópia local 'Arvore *raiz = *raiz_ptr;'
    // A própria 'raiz_ref' atua como a 'raiz' que queremos acessar e potencialmente modificar.
    int folhas_esquerda = contarFolhas(raiz_ref->esq);
    int folhas_direita = contarFolhas(raiz_ref->dir);

    std::cout << "\n--- Igualando Folhas das Sub-Arvores ---" << std::endl;
    std::cout << "Folhas iniciais: Esquerda=" << folhas_esquerda << ", Direita=" << folhas_direita << std::endl;

    // A estratégia e os comentários sobre a complexidade da remoção permanecem os mesmos.

    if (folhas_esquerda > folhas_direita) {
        int diff = folhas_esquerda - folhas_direita;
        std::cout << "A sub-arvore esquerda tem " << diff << " folhas a mais. Removendo folhas..." << std::endl;
        for (int i = 0; i < diff; i++) {
            std::cout << "Tentando remover uma folha da sub-arvore esquerda." << std::endl;
            // Exemplo conceitual 
            // int valor_folha_a_remover = encontrarValorMaiorFolha(raiz_ref->esq);
            // raiz_ref->esq = removerNo(raiz_ref->esq, valor_folha_a_remover);
            // folhas_esquerda = contarFolhas(raiz_ref->esq); // Recalcular
        }
        std::cout << "Operacao de remocao de folhas da sub-arvore esquerda finalizada (requer implementacao complexa)." << std::endl;

    } else if (folhas_direita > folhas_esquerda) {
        int diff = folhas_direita - folhas_esquerda;
        std::cout << "A sub-arvore direita tem " << diff << " folhas a mais. Removendo folhas..." << std::endl;
        for (int i = 0; i < diff; i++) {
            std::cout << "Tentando remover uma folha da sub-arvore direita." << std::endl;
            // Exemplo conceitual:
            // int valor_folha_a_remover = encontrarValorMaiorFolha(raiz_ref->dir);
            // raiz_ref->dir = removerNo(raiz_ref->dir, valor_folha_a_remover);
            // folhas_direita = contarFolhas(raiz_ref->dir); // Recalcular
        }
        std::cout << "Operacao de remocao de folhas da sub-arvore direita finalizada (requer implementacao complexa)." << std::endl;
    } else {
        std::cout << "O numero de folhas ja esta igual nas sub-arvores." << std::endl;
    }

    // Re-checar as contagens após a "tentativa" de igualar.
    folhas_esquerda = contarFolhas(raiz_ref->esq);
    folhas_direita = contarFolhas(raiz_ref->dir);
    std::cout << "Folhas apos a operacao: Esquerda=" << folhas_esquerda << ", Direita=" << folhas_direita << std::endl;
    std::cout << "----------------------------------------" << std::endl;
}

/*
// Exemplo de uso para teste em C++:
// Funções auxiliares para criar a árvore e limpar a memória.
Arvore* inserirNo(Arvore* no, int info) {
    if (no == nullptr) {
        return new Arvore(info);
    }
    if (info < no->info) {
        no->esq = inserirNo(no->esq, info);
    } else if (info > no->info) {
        no->dir = inserirNo(no->dir, info);
    }
    return no;
}

void liberarArvore(Arvore* no) {
    if (no != nullptr) {
        liberarArvore(no->esq);
        liberarArvore(no->dir);
        delete no;
    }
}

int main() {
    Arvore *raiz = nullptr;

    // Criar a árvore de exemplo:
    //        10
    //       /  \
    //      5    15
    //     / \  /  \
    //    2   7 12  18
    //   / \
    //  1   3

    raiz = inserirNo(raiz, 10);
    raiz = inserirNo(raiz, 5);
    raiz = inserirNo(raiz, 15);
    raiz = inserirNo(raiz, 2);
    raiz = inserirNo(raiz, 7);
    raiz = inserirNo(raiz, 12);
    raiz = inserirNo(raiz, 18);
    raiz = inserirNo(raiz, 1);
    raiz = inserirNo(raiz, 3);

    // Chamar a função para igualar as folhas
    igualarFolhasSubArvores(raiz); // Passamos 'raiz' por referência, sem '&' explícito no main,
                                  // pois o '&' já faz parte da assinatura do parâmetro da função.

    // Liberar a memória da árvore
    liberarArvore(raiz);

    // Teste com uma árvore vazia
    std::cout << "\n--- Teste com arvore vazia ---" << std::endl;
    Arvore *raiz_vazia = nullptr;
    igualarFolhasSubArvores(raiz_vazia);

    return 0;
}
*/
